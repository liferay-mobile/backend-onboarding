{"title":"Mobile OnBoarding","githubRepo":"liferay-mobile/mobile-onboarding","googleAnalytics":"","index":{"title":"Home","description":"Liferay Engineering Brazil","content":" Copyright © 2018 Liferay, Inc Powered by WeDeploy™ ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/./","children":{"documentation":{"title":"Documentation","description":"Everything you need to know to get started.","content":" Documentation Start learning how Liferay does all that! Choose a Guide Each one provide step by step coverage for every core feature. ","srcFilePath":"src/pages/documentation/index.soy","id":"documentation","location":"/documentation/","url":"/documentation/","children":{"search":{"title":"Search","description":"Find what you're looking for in the documentation.","hidden":true,"content":" Electric Docs Start learning how Liferay does all that! ","srcFilePath":"src/pages/documentation/search.soy","id":"search","location":"/documentation/search.html","url":"/documentation/search.html"},"Analytics Android":{"title":"Analytics Android Development","description":"","layout":"guide","icon":"code-file","weight":4,"content":" {$page.description} Development This library was developed in Kotlin, it is just a SDK to make a backpressure of Analytics events to send to Analytics Cloud. Actually we support only custom events and some forms events. More informations can be found in our repository. Repository Continuous Integration We used the Travis to run our unit tests and generate the test coverage. We send all informations to Codacy, to generate a history of our code quality, using analisys static, code style and code coverage. You need to request an account an invite to have access on Codacy How to publish a new version ? We use the bintray to send versions to JCenter and to Maven Central. You need to request an account on Bintray to allan.melo@liferay.com or victor.oliveira@liferay.com. After this, you need to create a bintray.user=yourbintrayuser bintray.apiKey=xxxxxxxxxxxxxxxxxxxxxxxxxxx Your API Key can be found here. Core You need to increase the version, found in In terminal, from Forms plugin You need to increase the version, found in In terminal, from ","srcFilePath":"src/pages/documentation/Analytics Android/index.md","id":"Analytics Android","location":"/documentation/Analytics Android/","url":"/documentation/Analytics Android/"},"Analytics iOS":{"title":"Analytics iOS Development","description":"","layout":"guide","icon":"code-file","weight":4,"content":" {$page.description} Development This library was developed in Swift, it is just a SDK to make a backpressure of Analytics events to send to Analytics Cloud. Actually we support only custom events and some forms events. More informations can be found in our repository. Repository Continuous Integration We used the Travis to run our unit tests and generate the test coverage. We send all informations to Codacy, to generate a history of our code quality, using analisys static, code style and code coverage. How to publish a new version ? Cocoapods To publish any pod, you need to create a session using pod trunk register liferay.mobile@liferay.com After this, you need to open the link sent to Core To release a new version of core of Analytics, it is necessary from root folder, increase the version on Create a tag with the version name git tag \"X.X.X\" Push the tag to remote git push --tags Upload the new version to Cocoapods pod trunk liferay-analytics-ios.podspec Forms plugin From Create a tag with the version name git tag \"X.X.X\" Push the tag to remote git push --tags Upload the new version to Cocoapods liferay-analytics-forms-ios.podspec ","srcFilePath":"src/pages/documentation/Analytics iOS/index.md","id":"Analytics iOS","location":"/documentation/Analytics iOS/","url":"/documentation/Analytics iOS/"},"Bundle Loop Server ":{"title":"Bundle Loop Server","description":"","layout":"guide","icon":"code-file","weight":4,"content":" {$page.description} How to configure a Loop bundle ? Clone the repositories git clone git@github.com:liferay/liferay-portal-ee.git git clone git@github.com:liferay/liferay-plugins-ee.git Actually the Loop server is using the portal 6.2 version that using Java 1.7 You can download this version here () It is strongly recommended to use the alias java7=\"export JAVAHOME=(/usr/libexec/javahome -v 1.7)\" alias java8=\"export JAVAHOME=(/usr/libexec/javahome -v 1.8)\" You need to install a compatible version of To install using brew, you can run this command brew install ant@1.9 To link this old version, use the command brew link ant@1.9 --force Add the file app.server.type=tomcat app.server.tomcat.version=7.0.62 app.server.parent.dir=${project.dir}/../bundles/loop-portal-ee-6.2.x Now we are ready to deploy the java7 cd {portal.dir} ant all cd {loop.portlet.dir} ant all Create the #!/bin/sh #export JAVAHOME=(/usr/libexec/javahome -v 1.7) export JAVAHOME=/Library/Java/JavaVirtualMachines/jdk1.7.080.jdk/Contents/Home ant -buildfile ./liferay-plugins-ee/hooks/portal-compat-hook/build.xml clean deploy ant -buildfile ./liferay-plugins-ee/portlets/asset-entry-set-portlet/build.xml clean deploy ant -buildfile ./liferay-plugins-ee/portlets/asset-sharing-portlet/build.xml clean deploy ant -buildfile ./liferay-plugins-ee/portlets/loop-portlet/build.xml clean deploy ant -buildfile ./liferay-plugins-ee/portlets/push-notifications-portlet/build.xml clean deploy ant -buildfile ./liferay-plugins-ee/portlets/token-auth-portlet/build.xml clean deploy ant -buildfile ./liferay-plugins-ee/themes/loop-theme/build.xml clean deploy ant -buildfile ./liferay-plugins-ee/webs/url-metadata-scraper-web/build.xml clean deploy echo \"auth.token.ignore.portlets=82,1WARloopportlet\" ./bundles/tomcat-7.0.62/webapps/ROOT/WEB-INF/classes/portal-ext.properties Run ./deploy.sh run Create a file auth.token.ignore.portlets=82,1WARloopportlet 10. Start the tomcat from ./catalina.sh run 11. After started the server, you need to configure the database in user interface Additional information You need to put the token auth in /bundles/loop-portal-ee-6.2.x/tomcat-7.0.62/webapps/token-auth-portlet/WEB-INF/classes/portlet.properties (can be any value) token.secret = ANY_VALUE Create a file auth.token.ignore.portlets=82,1WARloopportlet Configure Push Notifications Give permission to all users allow register their push token in portal, in Roles Define permission configuration push notification Configure Android API Key using our development key. Put this API Key Push Android API Key Development Configure the iOS certificate, the development certificate can be found in loop/liferay-loop-ios/certificates/push/development/certificate_sandbox.p12 and the password is Push iOS Certificate password ","srcFilePath":"src/pages/documentation/Bundle Loop Server /index.md","id":"Bundle Loop Server ","location":"/documentation/Bundle Loop Server /","url":"/documentation/Bundle Loop Server /"},"Liferay Events Xamarin":{"title":"Liferay Events Xamarin Development","description":"","layout":"guide","icon":"code-file","weight":4,"content":" {$page.description} Development Repository Continuous Integration We used the Travis to run our unit tests and report the status for each pull request. How to release a new version ? ","srcFilePath":"src/pages/documentation/Liferay Events Xamarin/index.md","id":"Liferay Events Xamarin","location":"/documentation/Liferay Events Xamarin/","url":"/documentation/Liferay Events Xamarin/"},"Liferay Sync Android":{"title":"Liferay Sync Android Development","description":"","layout":"guide","icon":"code-file","weight":4,"content":" {$page.description} Development Repository Continuous Integration We used the Travis to run our unit tests and report the status for each pull request. How to release a new version ? ","srcFilePath":"src/pages/documentation/Liferay Sync Android/index.md","id":"Liferay Sync Android","location":"/documentation/Liferay Sync Android/","url":"/documentation/Liferay Sync Android/"},"Liferay Sync iOS":{"title":"Liferay Sync iOS Development","description":"","layout":"guide","icon":"code-file","weight":4,"content":" {$page.description} Development Repository Continuous Integration We used the Travis to run our unit tests and report the status for each pull request. How to release a new version ? ","srcFilePath":"src/pages/documentation/Liferay Sync iOS/index.md","id":"Liferay Sync iOS","location":"/documentation/Liferay Sync iOS/","url":"/documentation/Liferay Sync iOS/"},"Loop Android":{"title":"Loop Android Development","description":"","layout":"guide","icon":"code-file","weight":4,"content":" {$page.description} Development Repository Continuous Integration We used the Travis to run our unit tests and report the status for each pull request. How to release a new version ? ","srcFilePath":"src/pages/documentation/Loop Android/index.md","id":"Loop Android","location":"/documentation/Loop Android/","url":"/documentation/Loop Android/"},"Loop iOS":{"title":"Loop iOS Development","description":"","layout":"guide","icon":"code-file","weight":4,"content":" {$page.description} Development Repository Continuous Integration We used the Travis to run our unit tests and report the status for each pull request. How to release a new version ? ","srcFilePath":"src/pages/documentation/Loop iOS/index.md","id":"Loop iOS","location":"/documentation/Loop iOS/","url":"/documentation/Loop iOS/"},"Mobile SDK Android":{"title":"Mobile SDK Android Development","description":"","layout":"guide","icon":"code-file","weight":4,"content":" {$page.description} Development The Liferay Mobile SDK is a framework for building native mobile apps that integrate with your different Liferay Portal instances and their portlets. The SDK provides the means for your mobile apps to easily consume Liferay Portal's core web services and the web services of your custom portlets. It wraps Liferay JSON web services, takes care of authentication, makes HTTP requests (synchronously or asynchronously), parses JSON results and handles server side exceptions. Learn how to use Repository How to publish a new version ? We use the bintray to send versions to JCenter and to Maven Central. You need to request an account on Bintray to allan.melo@liferay.com or victor.oliveira@liferay.com. After this, you need to create a bintray.user=yourbintrayuser bintray.apiKey=xxxxxxxxxxxxxxxxxxxxxxxxxxx Your API Key can be found here. You need to increase the version, found in In terminal, from ","srcFilePath":"src/pages/documentation/Mobile SDK Android/index.md","id":"Mobile SDK Android","location":"/documentation/Mobile SDK Android/","url":"/documentation/Mobile SDK Android/"},"Mobile SDK iOS":{"title":"Mobile SDK iOS Development","description":"","layout":"guide","icon":"code-file","weight":4,"content":" {$page.description} Development The Liferay Mobile SDK is a framework for building native mobile apps that integrate with your different Liferay Portal instances and their portlets. The SDK provides the means for your mobile apps to easily consume Liferay Portal's core web services and the web services of your custom portlets. It wraps Liferay JSON web services, takes care of authentication, makes HTTP requests (synchronously or asynchronously), parses JSON results and handles server side exceptions. Learn how to use Repository How to publish a new version ? Cocoapods To publish any pod, you need to create a session using pod trunk register liferay.mobile@liferay.com After this, you need to open the link sent to To release a new version of core of Analytics, it is necessary from root folder, increase the version on Create a tag with the version name git tag \"X.X.X\" Push the tag to remote git push --tags Upload the new version to Cocoapods pod trunk liferay-analytics-ios.podspec ","srcFilePath":"src/pages/documentation/Mobile SDK iOS/index.md","id":"Mobile SDK iOS","location":"/documentation/Mobile SDK iOS/","url":"/documentation/Mobile SDK iOS/"},"WeDeploy Android":{"title":"WeDeploy Android SDK","description":"","layout":"guide","icon":"code-file","weight":4,"content":" {$page.description} Development It's a SDK to use the WeDeploy easily in your mobile. You can use a cool feature like DATA in realtime to create reactive APPs. Repository Release Process for the WeDeploy SDKs This document describes the release process of our public SDKs. It exists to improve visibility among team members and it should be used by project maintainers to know what needs to be updated on every new release. WeDeploy Java projects can be released in the following repositories: Public Maven Central (https://search.maven.org), for all the artifacts that have to be publically available. The releasing is done in two steps: first publishing artifacts to Sonatype (https://oss.sonatype.org) and then releasing them to Maven Central. Wedeploy Nexus repo, for private artifacts needed by the infrastructure and/or for snapshots of public artifacts. Bintray (https://bintray.com) - another public repo, used just for the Android artifacts. Note: for the purpose of local development, all artifacts can be published locally. Public Java repos (on Maven central) are: common api-java api-java.api-client wedeploy-android-sdk Step 0 : Configuration WeDeploy Nexus For the Wedeploy Nexus, you need these in wedeployRepo=https://repository.liferay.com/nexus/content/repositories/xanadu/ wedeployRepoUsername=... wedeployRepoPassword=... Sonatype & Maven Central For the Sonatype, you need these in sonatypeUsername=... sonatypePassword=... To get Sonatype credentials, you have to: Sign up for a Sonatype Jira account: https://issues.sonatype.org/secure/Signup!default.jspa Ask for user rights to publish to wedeloy, refering this issue: https://issues.sonatype.org/browse/OSSRH-30085 Now use your Sonatype jira credentials above. Bintray Bintray requires the following environments to be set: BINTRAY_USER BINTRAY_KEY GPG Keys Next thing to configure is your GPG keys. Create one and set it in signing.keyId=... signing.password=... signing.secretKeyRingFile=... Publishing to Maven Central requires all artifacts to be signed. Step 1 : Publishing To publish to Wedeploy Nexus: To publish a release to Sonatype: WEDEPLOY_RELEASE=true ./gradlew publishJarPublicationToSonatypeRepository To publish a release to Bintray: WEDEPLOY_RELEASE=true ./gradlew bintray Artifacts are now published. Wedeploy Nexus and Bintray artifacts are immediately available. Sonatype artifacts needs to be ‘released’ to Maven central. Step 2 : Releasing Releasing is only needed for Sonatype artifacts - to be released in the Maven central. Just run: Give it some time for artifact to be available on Maven Central. Optionally, you can do this step in the UI - you can get more information about the issues. For the Bintray - you have to confirm the upload on: https://bintray.com/liferay/liferay-mobile Step 3 : Update docs and changelog Update documentation: Edit site.json file Update changelog Edit index.md file ","srcFilePath":"src/pages/documentation/WeDeploy Android/index.md","id":"WeDeploy Android","location":"/documentation/WeDeploy Android/","url":"/documentation/WeDeploy Android/"},"WeDeploy iOS":{"title":"WeDeploy iOS SDK","description":"","layout":"guide","icon":"code-file","weight":4,"content":" {$page.description} Development It's a SDK to use the WeDeploy easily in your mobile. You can use a cool feature like DATA in realtime to create reactive APPs. Repository Release Process for the WeDeploy SDKs This document describes the release process of our public SDKs. It exists to improve visibility among team members and it should be used by project maintainers to know what needs to be updated on every new release. Create a git tag with the version Upload a new podspec to cocoapods a. Run pod trunk push WeDeploy.podspec Update changelog a. Edit index.md file ","srcFilePath":"src/pages/documentation/WeDeploy iOS/index.md","id":"WeDeploy iOS","location":"/documentation/WeDeploy iOS/","url":"/documentation/WeDeploy iOS/"}},"childIds":["Analytics Android","Analytics iOS","Bundle Loop Server ","Liferay Events Xamarin","Liferay Sync Android","Liferay Sync iOS","Loop Android","Loop iOS","Mobile SDK Android","Mobile SDK iOS","WeDeploy Android","WeDeploy iOS","search"]},"tutorials":{"title":"Tutorials","description":"Foo bar.","//url":"/tutorials/example/first-step.html/","//layout":false,"content":" Tutorials and Tips Little help when you need! Choose a Tutorial Each one provide step by step coverage for every core feature. ","srcFilePath":"src/pages/tutorials/index.soy","id":"tutorials","location":"/tutorials/","url":"/tutorials/","children":{"search":{"title":"Search","description":"Find what you're looking for in the documentation.","hidden":true,"content":" Electric Docs Start learning how Liferay does all that! ","srcFilePath":"src/pages/tutorials/search.soy","id":"search","location":"/tutorials/search.html","url":"/tutorials/search.html"},"bestPractice":{"title":"Best Programmings Practice","description":"This section shows some tips and good programming practices, showing how to organize the code and also the meaning of a clean code.","layout":"tips","icon":"","weight":4,"content":" {$page.description} Clean Code Simple: easy to understand code. Straight: go straight to the point, do not \"loop\" to achieve your goal. Efficient: code that does what is proposed. No duplicity: it does not do what another part of the code already does. Elegant: because it is different from other codes. Done with care: those who did had concern in producing that code. Programming Practices Add new methods in alphabetical order relative to the existing code. [JS] Do not deploy with any running breakpoints. Check the need to create unit tests before performing the pull request. Perform unit and integration tests before performing the pull request. Each line of code can not exceed 80 characters. Do not perform method chaining: person.setName(\"Peter\").setAge(21).introduce(); Verify that the branch is updated before committing. Make sure to write JavaDocs when it needed. Pay attention to finished your task before start new ones. ","srcFilePath":"src/pages/tutorials/bestPractice/index.md","id":"bestPractice","location":"/tutorials/bestPractice/","url":"/tutorials/bestPractice/"},"example":{"children":{"1step":{"title":"Step 1","description":"Foo bar.","buttonTitle":"I did step 1","parentId":"example","layout":"tutorial","time":90,"weight":1,"content":" {$page.title} Must have software for MacOS Users: Brew In the terminal: '/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)' More info: brew.sh ","srcFilePath":"src/pages/tutorials/example/1step.md","id":"1step","location":"/tutorials/example/1step.html","url":"/tutorials/example/1step.html"},"2step":{"title":"Step 2","description":"Foo bar.","buttonTitle":"I did step 2","parentId":"example","layout":"tutorial","time":90,"weight":2,"content":" {$page.title} Java JDK8 In the terminal: '$ curl -s \"https://get.sdkman.io\" | bash' Follow the instructions on-screen to complete installation. Next, open a new terminal or enter: '$ source \"$HOME/.sdkman/bin/sdkman-init.sh\"' Lastly, run the following code snippet to ensure that installation succeeded: '$ sdk version' If all went well, the version should be displayed. More info: sdkman.io ","srcFilePath":"src/pages/tutorials/example/2step.md","id":"2step","location":"/tutorials/example/2step.html","url":"/tutorials/example/2step.html"},"3step":{"title":"Step 3","description":"Foo bar.","buttonTitle":"I did step 3","parentId":"example","layout":"tutorial","time":90,"weight":3,"content":" MySQL and MySQL Workbench MySQL In the terminal: '$ brew install mysql' More info: SQL MySQL Workbench In the terminal: 'brew tap caskroom/cask' 'brew install brew-cask' 'brew cask install mysqlworkbench' `","srcFilePath":"src/pages/tutorials/example/3step.md","id":"3step","location":"/tutorials/example/3step.html","url":"/tutorials/example/3step.html"},"4step":{"title":"Step 4","description":"Foo bar.","buttonTitle":"I did step 4","parentId":"example","layout":"tutorial","time":90,"weight":4,"content":" SourceTree If you want to install SourceTree, you should access sourceTree and follow the instructions. ","srcFilePath":"src/pages/tutorials/example/4step.md","id":"4step","location":"/tutorials/example/4step.html","url":"/tutorials/example/4step.html"},"5step":{"title":"Step 5","description":"Foo bar.","buttonTitle":"I did step 5","parentId":"example","layout":"tutorial","time":90,"weight":5,"content":" Not mandatory, but they’re really interesting: Iterm2 zsh Oh my zsh If you wish install any of this, here is a link to help you out. ","srcFilePath":"src/pages/tutorials/example/5step.md","id":"5step","location":"/tutorials/example/5step.html","url":"/tutorials/example/5step.html"},"6step":{"title":"Step 6","description":"Foo bar.","buttonTitle":"I did step 6","parentId":"example","layout":"tutorial","time":90,"weight":6,"content":" Java IDE: Eclipse. Intellij. ","srcFilePath":"src/pages/tutorials/example/6step.md","id":"6step","location":"/tutorials/example/6step.html","url":"/tutorials/example/6step.html"},"7step":{"title":"Step 7","description":"Foo bar.","buttonTitle":"I did step 7","parentId":"example","layout":"tutorial","time":90,"weight":7,"content":" Text Editor: Sublime. Visual Studio Code.","srcFilePath":"src/pages/tutorials/example/7step.md","id":"7step","location":"/tutorials/example/7step.html","url":"/tutorials/example/7step.html"}},"title":"Software Installation","description":"Foo bar.","tutorialTitle":"Must have software for MacOS Users:","url":"/tutorials/example/1step.html","layout":false,"content":" ","srcFilePath":"src/pages/tutorials/example/index.soy","id":"example","location":"/tutorials/example/","customURL":true,"childIds":["1step","2step","3step","4step","5step","6step","7step"]},"tips":{"children":{"code":{"title":"Code","description":"","layout":"tips","icon":"","weight":1,"content":" {$page.description} New Code? On the terminal, access the modified code folder and run the command: 'gw clean deploy' Do you want to organize your code before Pull Request? In the terminal, run the following commands: Check for inconsistencies.: 'gw formatSource' Check for inconsistencies in the .jsp file: 'check_sf */.jsp' check for inconsistencies in the .soy file: 'mcritic XXX.soy' To run the command 'mcritic XXX.soy' command, you must perform the following: In the terminal: 'npm install -g metal-soy-critic' Any questions, access metal-soy-critic. To run the command 'check_sf */.jsp', you must perform the following: In the terminal: 'sudo npm install -g check-source-formatting' Any questions, access github.com/natecavanaugh. Do you want to run tests? In the terminal, access the test file of the folder containing the modified code. Unit tests: 'gw test' Integration Tests: 'gw testIntegration' Something's Wrong ? In the terminal, run the command: 'telnet localhost 11311' Check to see if the test file has been installed and uninstalled. 'uninstall NUMBERFILE' Observe the test file number and replace in 'XXX' To quit telnet: control + ']' . Repeat the tests! Run the command 'Ant all' Drop the server. Access the life-portal. Git clean -fdx. Git pull upstream master. Git push origin master. Run the command: 'Ant all'. ","srcFilePath":"src/pages/tutorials/tips/code.md","id":"code","location":"/tutorials/tips/code.html","url":"/tutorials/tips/code.html"},"eclipse":{"title":"Eclipse","description":"This section shows some tips related with the Eclipse IDE.","layout":"tips","icon":"","weight":3,"content":" {$page.description} Eclipse crashing? Access ' Eclipse - Content - Eclipse - eclipse.ini '. Edit the file on the line that contains 'Xms' and ' Xmx' with the amount of space. E.g.: Xms4G. Problems getting access to debug mode in eclipse? Check your setenv.sh file located in the bin folder of the tomcat. Make sure the contents of the file match the text below: CATALINAOPTS=\"$CATALINAOPTS -Dfile.encoding=UTF8 -Djava.net.preferIPv4Stack=true -Dorg.apache.catalina.loader.WebappClassLoader.ENABLECLEARREFERENCES=false -Duser.timezone=GMT -Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n\" JMX_OPTS=\"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=8099 -Dcom.sun.management.jmxremote.ssl=false\" CATALINAOPTS=\"${CATALINAOPTS} ${JMX_OPTS}\" if [ \"$1\" = \"jacoco\" ] then JACOCOOPTS=\"-javaagent:/YOURPATH/bundles/liferay-portal/tomcat-8.0.32/bin/jacocoagent.jar=destfile=/YOUR_PATH/liferay-portal/jacoco/liferay-jacoco.exec,excludes=,includes=*,output=file,append=true\" CATALINAOPTS=\"${CATALINAOPTS} ${JACOCO_OPTS}\" shift fi CATALINAOPTS=\"${CATALINAOPTS} -javaagent:/YOUR_PATH/liferay-portal/lib/portal/aspectj-weaver.jar -Dorg.aspectj.weaver.loadtime.configuration=com/liferay/aspectj/aop.xml\" JPDA_ADDRESS=\"8000\" Indentation Help ? Download plugin Arbitrary Lines . Help - Eclipse Marketplace Access the advanced settings. Eclipse - Preferences - General - Editors - Text Editors - Arbitrary Lines - Show Advanced Configuration Enable checkbox 'character size override' . Edit 'Override character width' field for 6.65. ","srcFilePath":"src/pages/tutorials/tips/eclipse.md","id":"eclipse","location":"/tutorials/tips/eclipse.html","url":"/tutorials/tips/eclipse.html"},"general":{"title":"General","description":"This section shows some tips related with computer configuration and some general orientation.","layout":"tips","icon":"","weight":4,"content":" {$page.description} Do you want to create an ALIAS? Access the terminal and type 'sublime .zshrc'. Add the desired ALIAS in the file. E.g.: alias gw=/Users/UserName/YOUR_PATH/liferay-portal/gradlew. Do you want to to kill the TomCat process? In the terminal: 'ps aux | grep tomcat' Then, run this command to kill the process. 'kill -9 XXX' Note the number returned after step 1 and enter in place of 'XXX'. Update the Macos Sierra? In the terminal: 'brew update'. Then, 'Brew install telnet'. Syncing pull requests with Jira: In the terminal: 'sudo npm install gh -g'. Then, 'sudo npm install gh-jira -g'. ","srcFilePath":"src/pages/tutorials/tips/general.md","id":"general","location":"/tutorials/tips/general.html","url":"/tutorials/tips/general.html"},"source-tree":{"title":"Source Tree","description":"This section shows some tips related with Source Tree.","layout":"tips","icon":"","weight":2,"content":" {$page.description} New Bug? Access the SourceTree. Update main branch (pull). Create a local branch only to work on the bug fixes. Remotes - Upstream - Master - Checkout Nomeie a nova branch pelo código do bug. E.g.: LPS - 1234. Do you want to commit? Check for inconsistencies in the changed code. Run testes. Save the work. Save as Stache. Update master branch (pull). Commit Your changed code will be in 'File status' Perform push (enable 'force push'). If the checkbox is not showing, enable it via: SourceTree - Preferences - Advanced - Allow force push. Run the pull request through the terminal. 'gh pr -s liferay' Confusion after committing? Did you commit any separate commit that should have gone next to another or missed the message of a commit? You can solve the problem by: Interactive Rebase Identify the commit that generated the problem. Select the commit just below it and choose the 'Rebase children of XXX interactively' option. Pop-up will open and a list of commits will be displayed. Identify the one you want. To edit the message of a commit, select it and click 'Edit message'. To join two separate commits, drag the desired commit one position above the other desired one and click 'Squash with previous'. Reset Master Identify the commit that generated the problem. Select the commit just below it and choose the option 'Reset master to this branch'. Any modifications made by you before this commit will return to the file status. Reorganize your commits. ","srcFilePath":"src/pages/tutorials/tips/source-tree.md","id":"source-tree","location":"/tutorials/tips/source-tree.html","url":"/tutorials/tips/source-tree.html"}},"title":"Tips","description":"","layout":"tips","icon":"","weight":5,"content":" {$page.description} ","srcFilePath":"src/pages/tutorials/tips/index.md","id":"tips","location":"/tutorials/tips/","url":"/tutorials/tips/","childIds":["code","source-tree","eclipse","general"]}},"childIds":["bestPractice","tips","search","example"]},"team":{"title":"Team","description":"Everything you need to know to get started.","content":" Mobile Team Stay informed about what is happening in the team. Choose a Topic Each one provides a description of how it is our daily work. ","srcFilePath":"src/pages/team/index.soy","id":"team","location":"/team/","url":"/team/","children":{"search":{"title":"Search team","description":"Find what you're looking for in the documentation.","hidden":true,"content":" Electric Docs Start learning how to leverage the power of . ","srcFilePath":"src/pages/team/search.soy","id":"search","location":"/team/search.html","url":"/team/search.html"},"Mobile Manifesto":{"title":"Mobile Manifesto","description":"","layout":"team","icon":"people","weight":2,"content":" Mission: Create excellent solutions that can be used everywhere to transform the Liferay ecosystem and the user's life. Products with excellence The act of writing software should be approached as an art. All the guild members should strive to produce, not only software that works, but software of excellent quality The software should have, not only excellent quality for the end user, but also for the developers writing it. That way we should always strive for quality in maintenance projects. Code reviews are part of the maintenance and development process. All developers should be able to review code from other guild member and keeping mutual respect. We should be able to respond to changes. Creating value in a constant and incremental way is always important. We value more responding to change over following a plan. We value more working software over comprehensive documentation. Servant mindset It’s a duty of all guild members to share knowledge and information to the other guild members. When sharing knowledge, we should focus on the reasons and ways of benefitting of it. The guild should meet regularly to present the work currently in progress. The guild not only should share knowledge locally but also with the global guild. Continuous improvement All guild members should be aware of what is happening in the mobile world, inside and outside of their country. The guild members should attend to the best events, read the most important publications and know the key persons in the area. All guild members should always be motivated to learn new technologies, languages and frameworks that bring value to the guild. All should be open to give and receive suggestions and constructive feedback. All guild members should always be available to help each other. At the same time they should be curious and able to look for knowledge independently. Value people All guild members should be treated in the same way, independently of their performance, level or professional experience. The hierarchical structure should not trap communication. All guild members have the liberty to address to other project members, internal or external to the guild. ","srcFilePath":"src/pages/team/Mobile Manifesto/index.md","id":"Mobile Manifesto","location":"/team/Mobile Manifesto/","url":"/team/Mobile Manifesto/"},"collaboration":{"title":"Collaboration","description":"Teamwork is the ability to work together for a common vision. The ability to direct individual achievements focused on organizational goals.","layout":"team","icon":"people","weight":4,"content":" {$page.description} Keep in mind: All members should help each other where necessary, a request for help from any other should be considered a high priority. When replying to an email or other form of communication, be it digital or not, always be friendly and respectful. Absences must be communicated in advance through the channel chosen by the team. We should always be open to listening and providing constructive criticism. We always try to give feedback to the responsible person when we find something that needs to be improved. ","srcFilePath":"src/pages/team/collaboration/index.md","id":"collaboration","location":"/team/collaboration/","url":"/team/collaboration/"},"communication":{"title":"Communication","description":"","layout":"team","icon":"bullhorn","weight":6,"content":" {$page.description} Channels and Tools Email Slack: used globally by engineering for daily conversation (workspace: liferayeng.slack.com). Loop: for team announcements. Jira: for creating issues and keep track of the product progress. Github: for versioning control and source code management. Invision: to represent visually the interface behavior through the deliverables: workflow, breakpoints, motion and interface components. Zeplin: for checking design specifications to create CSS and HTML. ","srcFilePath":"src/pages/team/communication/index.md","id":"communication","location":"/team/communication/","url":"/team/communication/"},"liferay":{"title":"Liferay","description":"","layout":"team","icon":"liferay-logo-2-tiny","weight":2,"content":" {$page.description} About Liferay Liferay makes software that helps companies create digital experiences on web, mobile and connected devices. The platform is open source, which makes it more reliable, innovative and secure. Besides that, the company try to leave a positive mark on the world through business and technology. Mission: Building a vibrant business that makes technology useful and invests in communities. Vision: See people realize their full potential to serve others. Values: Produce by Excellence Lead by Serving Value People Grow and Get Better Stay Nerd Here you can have access to introductory videos about the Liferay culture and teams. It is recommended that you start with the list below: What's Liferay Liferay's Vision Value Proposition Introduction to Engineering ","srcFilePath":"src/pages/team/liferay/index.md","id":"liferay","location":"/team/liferay/","url":"/team/liferay/"},"projects":{"title":"Projects","description":"This section describes the projects being developed involving the backend team at the Liferay Recife office.","layout":"team","icon":"groups","weight":3,"content":" {$page.description} Forms A form is responsible for collecting and storing customer data, and can become a very important tool for systematizing information for various purposes. Through them, it is possible to research, document, formalize communications and control activities of organizations. It is a fundamental tool because allows administrators focus on what really matters. The forms team is in charge of developing and maintaining all parts of the portal related with Forms: Forms, Dynamic Data Lists and Web Form. Also the Dynamic Data Mapping (DDM) framework which also powers Web Content Structures and Document Types. Analytics Liferay Experience Cloud is a SaaS offering to enhance digital marketing activities through insights into the activities of a company’s customers across all touchpoints in the enterprise, whether or not those touchpoints are on the Liferay platform. Experience Cloud will enable you to gather analytics on three different dimensions: about people, their interactions and their customer journeys. Meanwhile, the Liferay Recife team is developing the analytics about the interactions of the individuals with content, both in the touchpoint (e.g., scroll depth on a landing page) and asset level (e.g., form field leading to abandonment), that leads to insights into which touchpoints or assets are the best performing. ","srcFilePath":"src/pages/team/projects/index.md","id":"projects","location":"/team/projects/","url":"/team/projects/"},"routine":{"title":"Routine","description":"The backend team routine consists of daily work combined with strategic management to achieve the expected results. This strategic management is based in effective meetings, balanced workload and collaborative team spirit. This section will describe the ticket management and all meetings.","layout":"team","icon":"calendar","weight":5,"content":" {$page.description} Ticket Management All the work in progress in engineering is monitored by a issue management (Jira). This system provides bug tracking, issue tracking, and project management functions. In other words, helps the team to keep an eye on all the activities day by day. Every team has its own kanban board with all your integrants as participants. In that way, Everyone knows which activity is aimed at who and their progress throughout the sprint. The image below shows a kanban board, which it can be noticed the participants and their issues. This image below shows one created ticket: There are 5 types of work: Story: Small unit of work to deliver a particular value back to the customer. Bug: An error in a system that causes it to produce an incorrect or unexpected result. Regression bug: Regression is when something that used to work fine does not work properly anymore. Task: Reflect work or initiatives that are very technical. Pull Request: Reviews from different teams and components. Every work has a different workflow from the creation of the ticket until the delivery of the expected result. This example below shows the step by step and the workflow to a new user story: Open: Product Manager or Technical Leader create the user story. Backlog: Product Designer development. Ready for development: List of stories ready to be developed. Selected for development: List of stories committed to be developed in the next 2 weeks. In Development: Engineers start working on the story. In Review: Once development is completed, peer review, QA review and validation and, Brian’s review. Documentation: Does the story need documentation? Generate a draft! Design Review: Product Designer make sure that the story requirements were developed according to the guidelines provided. PM Review: Product Manager validates the use cases. 10. Closed. Bugs are the type of work that needs to be under control, it means that should not exceed a certain limited number. To guide the team which bug they should resolve first, there is a classification based on the portal risk matrix that classifies the bug on a scale of 1-5. The developers should resolved the bugs in the descending order of their fix priority. This image below shows the successful ticket management to the bugs and regressions bugs workflow: Meetings The team meetings have the objective to verify the status of the work, but also to check if there is any need or trouble. For a meeting to be productive, it is necessary to list the different motives to be discussed and to mark different sessions to discuss each topic separately. In this way, the meeting does not become exhaustive or confusing. There are different types of meetings: Backlog Refinement: An event to refine and update the backlog with initial effort for each ticket and an opportunity to alignment and re-evaluate tickets and priorities. This meeting will occur every two weeks, in the week before the Planning meeting. It must involve the product manager, technical leader, product designer. every two weeks, in the week before planning meeting. Planning: Understand the stories with the proper acceptance criteria. The Product Manager will present all the stories for the new cycle and the team will assess each story, commit/accepted it to the sprint and breakdown it into small subtasks. every Monday, check the calendar to see the schedule. Stand Up: An event for the development team to synchronize activities. daily at 2pm. Product Sync-up: An event to share and evolve the product collaboratively. Whenever there is a need. Retrospective: An opportunity for the team to inspect itself and create a plan for improvements to be done during the next iteration. Every two weeks. Guild Reunion: An event to talk about general topics of the backend as a team or to discuss about a new technology. It is a open space to share any interesting points of view and to suggest any kind of improvements. Every tuesday at 10am. ","srcFilePath":"src/pages/team/routine/index.md","id":"routine","location":"/team/routine/","url":"/team/routine/"}},"childIds":["liferay","Mobile Manifesto","projects","collaboration","routine","communication","search"]}},"childIds":["documentation","team","tutorials"]}}